#ifndef SERVER_H
#define SERVER_H

#include "terminal.h"
#include <QFile>
#include <QFileDialog>
#include <QFileInfo>
#include <QListWidget>
#include <QMainWindow>
#include <QPlainTextEdit>
#include <QTcpServer>
#include <QTcpSocket>
#include <vector>

QT_BEGIN_NAMESPACE
namespace Ui
{
    class Server;
}
QT_END_NAMESPACE

struct Item
{
    QTcpSocket *socket;
    QListWidgetItem *List_item;
    QString name;
    Terminal *terminal;
    Item(QString name, QTcpSocket *socket, QListWidgetItem *List_item);
};

class Server : public QMainWindow
{
    Q_OBJECT

public:
    Server(QWidget *parent = nullptr);
    ~Server();

    //-------------------------------------------------------------------------------------------

private slots:
    void newConnection();
    void appendToSocketList(QTcpSocket *socket);
    void readSocket();
    void discardSocket();
    void displayError(QAbstractSocket::SocketError socketError);
    void sendSignal(QTcpSocket *socket, QString signal);
    void sendFile(QTcpSocket *socket, QString signal, QString filePath);
    //-------------------------------------------------------------------------------------------
    void on_listWidget_itemActivated(QListWidgetItem *item);
    //-------------------------------------------------------------------------------------------
    void new_command(QString to_who, QString command);
    void on_listWidget_itemChanged(QListWidgetItem *item);
    //-------------------------------------------------------------------------------------------
    void on_actionClose_triggered();
    //-------------------------------------------------------------------------------------------

private:
    Ui::Server *ui;
    //-------------------------------------------------------------------------------------------
    std::vector<Item> items;
    std::optional<Item *> find(QTcpSocket *socket);
    std::optional<Item *> find(QListWidgetItem *item);
    std::optional<Item *> find(QString name);
    bool erase(Item *item);
    //-------------------------------------------------------------------------------------------
    QTcpServer *server;
    QTcpSocket *send_to_all_socket;
};
#endif // SERVER_H
