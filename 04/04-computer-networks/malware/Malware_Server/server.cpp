#include "server.h"
#include "ui_server.h"

using namespace std;

#define PORT 8080
//-------------------------------------------------------------------------------------------
Item::Item(QString name, QTcpSocket *socket, QListWidgetItem *List_item)
{
    this->name = name;
    this->socket = socket;
    this->List_item = List_item;
}
//-------------------------------------------------------------------------------------------
Server::Server(QWidget *parent) : QMainWindow(parent), ui(new Ui::Server)
{
    ui->setupUi(this);
    //-------------------------------------------------------------------------------------------
    send_to_all_socket = new QTcpSocket();
    items.push_back(Item("All", send_to_all_socket, ui->listWidget->currentItem()));
    //-------------------------------------------------------------------------------------------
    server = new QTcpServer();
    // if (server->listen(QHostAddress::AnyIPv4, PORT))
    // {
    //     connect(server, &QTcpServer::newConnection, this, &Server::newConnection);
    //     qDebug() << server->serverAddress();
    // }
    if (server->listen(QHostAddress::LocalHost, PORT))
    {
        ui->statusbar->showMessage(QString("[LISTENING] Server is listening on port: %1.").arg(PORT), 0);
        qDebug() << server->serverAddress();
        connect(server, &QTcpServer::newConnection, this, &Server::newConnection);
    }
    else
    {
        qDebug() << QString("Unable to start the server: %1.").arg(server->errorString());
    }
}
Server::~Server()
{
    delete ui;
}
//-------------------------------------------------------------------------------------------
void Server::newConnection()
{
    while (server->hasPendingConnections())
    {
        appendToSocketList(server->nextPendingConnection());
    }
}
void Server::appendToSocketList(QTcpSocket *socket)
{
    connect(socket, &QTcpSocket::readyRead, this, &Server::readSocket);
    connect(socket, &QTcpSocket::errorOccurred, this, &Server::displayError);
    connect(socket, &QTcpSocket::disconnected, this, &Server::discardSocket);
}
void Server::discardSocket()
{
    QTcpSocket *socket = reinterpret_cast<QTcpSocket *>(sender());
    auto item = find(socket);
    if (item)
    {
        (*item)->List_item->~QListWidgetItem();
        if (!erase((*item)))
            qDebug() << "error in discardSocket in erase";
    }
    else
        qDebug() << "error in discardSoucket";

    socket->deleteLater();
}
void Server::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError)
    {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        qDebug() << "The host was not found. Please check the host name and port settings.";
        break;
    case QAbstractSocket::ConnectionRefusedError:
        qDebug() << "The connection was refused by the peer. Make sure QTCPServer is running, and check that the host name and port settings are correct.";
        break;
    default:
        QTcpSocket *socket = qobject_cast<QTcpSocket *>(sender());
        qDebug() << "The following error occurred: " << socket->errorString().toStdString();
        break;
    }
}
void Server::readSocket()
{
    QTcpSocket *socket = reinterpret_cast<QTcpSocket *>(sender());
    QByteArray buffer;

    QDataStream socketStream(socket);
    socketStream.setVersion(QDataStream::Qt_6_5);

    socketStream.startTransaction();
    socketStream >> buffer;

    if (!socketStream.commitTransaction())
    {
        return;
    }
    QString header = buffer.mid(0, 128);
    QString Type = header.split(",")[0].split(":")[1];
    buffer = buffer.mid(128);
    if (Type == "byte")
    {
        QString signal = header.split(",")[1].split(":")[1];
        QString byte(buffer.toStdString().c_str());
        if (signal.contains("ALL;"))
        {
            signal = signal.split("ALL;")[1];
            auto item = find("All");
            if (item)
            {
                static int c_count = 0, u_count = 0;
                if (signal == "command")
                {
                    c_count++;
                    if (c_count == items.size() - 1)
                    {
                        (*item)->terminal->set_text("command sended.");
                        c_count = 0;
                    }
                }
                else if (signal == "Upload")
                {
                    u_count++;
                    if (u_count == items.size() - 1)
                    {
                        (*item)->terminal->set_text("file UPLOADED.");
                        u_count = 0;
                    }
                }
            }
            else
                qDebug() << "readSoucket command error";
        }
        else
        {
            if (signal == "whoami")
            {
                QListWidgetItem *list_item = new QListWidgetItem(byte);
                list_item->setFlags(Qt::ItemFlag::ItemIsSelectable | Qt::ItemFlag::ItemIsEditable | Qt::ItemFlag::ItemIsEnabled);

                this->items.push_back(Item(byte, socket, list_item));
                ui->listWidget->addItem(list_item);
            }
            else
            {
                auto item = find(socket);
                if (item)
                {
                    if (signal == "command" || signal == "Upload")
                        (*item)->terminal->set_text(byte);
                }
                else
                    qDebug() << "readSoucket command error";
            }
        }
    }
    else if (Type == "file")
    {
        QString fileName = header.split(",")[1].split(":")[1];
        QString signal = header.split(",")[2].split(":")[1];
        QString size = header.split(",")[3].split(":")[1].split(";")[0];
        if (signal.contains("ALL;"))
        {
            signal = signal.split("ALL;")[1];
            auto item = find("All");
            if (item)
            {
                static int d_count = 0;
                //-------------------------------------------------------------------------------------------
                // QString filePath = signal + fileName;
                //-------------------------------------------------------------------------------------------
                QString fileDir = QFileDialog::getExistingDirectory(this);
                QString filePath = fileDir + '/' + fileName;
                //-------------------------------------------------------------------------------------------
                QFile file(filePath);
                if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
                {
                    file.write(buffer);
                    file.close();
                    d_count++;
                    if (d_count == items.size() - 1)
                    {
                        (*item)->terminal->set_text("files DOWNLOADED");
                        d_count = 0;
                    }
                }
                else
                    qDebug() << "error in readSocket type file";
            }
            else
                qDebug() << "readSoucket command error";
        }
        else
        {
            auto item = find(socket);
            if (item)
            {
                //-------------------------------------------------------------------------------------------
                // QString filePath = signal + fileName;
                //-------------------------------------------------------------------------------------------
                QString fileDir = QFileDialog::getExistingDirectory(this);
                QString filePath = fileDir + '/' + fileName;
                //-------------------------------------------------------------------------------------------
                QFile file(filePath);
                if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
                {
                    file.write(buffer);
                    file.close();
                }
                else
                    qDebug() << "error in readSocket type file";
            }
            else
                qDebug() << "readSoucket command error";
        }
    }
}
void Server::sendSignal(QTcpSocket *socket, QString signal)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_6_5);
            QByteArray header;
            header.prepend(QString("Type:signal,fileName:null,fileSize:%1;").arg(signal.size()).toUtf8());
            header.resize(128);
            QByteArray byteArray = signal.toUtf8();
            byteArray.prepend(header);
            socketStream << byteArray;
        }
        else
        {
            qDebug() << "Socket doesn't seem to be opened";
        }
    }
    else
    {
        qDebug() << "Not connected";
    }
}
void Server::sendFile(QTcpSocket *socket, QString filePath, QString signal)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            socket->setReadBufferSize(0);
            QFile m_file(filePath);
            if (m_file.open(QIODevice::ReadOnly))
            {
                QDataStream socketStream(socket);
                socketStream.setVersion(QDataStream::Qt_6_5);
                //-------------------------------------------------------------------------------------------
                QFileInfo fileInfo(m_file.fileName());
                QString fileName(fileInfo.fileName());
                QByteArray header;
                header.prepend(QString("fileType:file,fileName:%1,signal:%2,fileSize:%3;").arg(fileName).arg(signal).arg(m_file.size()).toUtf8());
                header.resize(128);
                QByteArray byteArray = m_file.readAll();
                byteArray.prepend(header);
                //-------------------------------------------------------------------------------------------
                socketStream << byteArray;
            }
            else
            {
                qDebug() << "Couldn't open the attachment!";
            }
        }
        else
        {
            qDebug() << "Socket doesn't seem to be opened";
        }
    }
    else
    {
        qDebug() << "Not connected";
    }
}
//-------------------------------------------------------------------------------------------
void Server::on_listWidget_itemActivated(QListWidgetItem *item)
{
    Terminal *terminal;
    auto it = find(item->text());
    //-------------------------------------------------------------------------------------------
    if (item->text() == "All")
        terminal = new Terminal("All");
    else
        terminal = new Terminal(item->text());
    //-------------------------------------------------------------------------------------------
    if (it)
        (*it)->terminal = terminal;
    else
        qDebug() << "error in itemActivated";
    //-------------------------------------------------------------------------------------------
    connect(terminal, SIGNAL(new_command(QString, QString)), this, SLOT(new_command(QString, QString)));
    terminal->show();
}
void Server::on_listWidget_itemChanged(QListWidgetItem *item)
{
    auto it = find(item);
    if (it)
        (*it)->name = item->text();
    else
        qDebug() << "error in itemChanged";
}
//-------------------------------------------------------------------------------------------
void Server::new_command(QString to_who, QString command)
{
    if (to_who == "All")
    {
        for (auto &&i : items)
        {
            if (i.name != "All")
            {
                if (command.contains("UPLOAD"))
                    sendFile(i.socket, command.split(" ")[1], "ALL;" + command.split(" ")[2]);
                else
                    sendSignal(i.socket, "ALL;" + command);
            }
        }
    }
    else
    {
        auto item = find(to_who);
        if (item)
        {
            if (command.contains("UPLOAD"))
            {
                QString filePath = QFileDialog::getOpenFileName(this);
                sendFile((*item)->socket, filePath, command.split(" ")[1]);

                // sendFile((*item)->socket, command.split(" ")[1], command.split(" ")[2]);
            }
            else
                sendSignal((*item)->socket, command);
        }
        else
            qDebug() << "error in new_command";
    }
}
//-------------------------------------------------------------------------------------------
std::optional<Item *> Server::find(QString name)
{
    for (auto &&i : this->items)
    {
        if (i.name == name)
        {
            return &i;
        }
    }
    return std::nullopt;
}
std::optional<Item *> Server::find(QTcpSocket *socket)
{
    for (auto &&i : this->items)
    {
        if (i.socket == socket)
        {
            return &i;
        }
    }
    return std::nullopt;
}
std::optional<Item *> Server::find(QListWidgetItem *item)
{
    for (auto &&i : this->items)
    {
        if (i.List_item == item)
        {
            return &i;
        }
    }
    return std::nullopt;
}
bool Server::erase(Item *item)
{
    for (vector<Item>::iterator i = items.begin(); i != items.end(); ++i)
    {
        if (i->name == item->name)
        {
            items.erase(i);
            return true;
        }
    }
    return false;
}
//-------------------------------------------------------------------------------------------
void Server::on_actionClose_triggered()
{
    if (!ui->listWidget->selectedItems().empty())
    {
        auto item = find(ui->listWidget->selectedItems()[0]->text());
        if ((*item)->name != "All")
        {
            if (item)
            {
                (*item)->socket->abort();
                if (!erase((*item)))
                    qDebug() << "error in actionClose in erase";
            }
            else
                qDebug() << "error in actionClose";
        }
        else
            qDebug() << "it's unclosable";
    }
    else
        qDebug() << "Select sth";
}
